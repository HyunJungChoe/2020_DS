#include<stdio.h>
#include<stdlib.h>
#include<string.h>


typedef struct _tree Tree;
struct _tree {
	int key;
	struct _tree * left;
	struct _tree * right;

};
//------------------------------------------------------------------------------

#define STACK_SIZE 5 
int top;
Tree *Stack[STACK_SIZE];//구조체 포인터 배열로 만든 스택이 메모리 아낌

void init_stack()
{
	top = -1;
}

void push(Tree* data)
{
	if (top >= STACK_SIZE - 1)
	{
		puts("x");
		return;
	}
	Stack[++top] = data;

}

Tree* pop(void)
{
	if (top <= -1)
	{
		puts("X");
		return -1;
	}
	return Stack[top--];
}
//---------------------------------------------------------------------


void preorder(Tree *p) //프린트문 위치에 따라 전위
{
	
	
	if (p != NULL)
	{
		printf("%d ", p->key);
		preorder(p->left);
		preorder(p->right);

	}
}

int stack_empty(void)
{
	if (top <= -1)
	{
		
		return 0;
	}
}

void preorder2(Tree *p) //
{
	push(p);
	while(stack_empty()) //스택이 비어있지 않으면 pop
	{
		Tree* k=pop();
		printf("%d ", k->key);
		if (k->right != NULL)
		{
			push(k->right);
		}
		if (k->left != NULL)
		{
			push(k->left);
		}
	}

	
}

void inorder(Tree *p) //프린트문 위치에 따라 중위 //트리 정렬 (왼쪽이 자기보다 작고, 오른쪽은 자기보다 크다)
{
	

	if (p != NULL)
	{
		
		inorder(p->left);
		printf("%d ", p->key);
		inorder(p->right);

	}
}

void inorder2(Tree *p) 
{
	//root를 스택에 푸시
	//푸시한 노드의 왼쪽 자식을 계속 푸시(널 또는 테일)
	//(널 또는 테일) 만나면 스택에서 pop 
	//pop한것의 오른쪽 자식을 푸시
	
	while (1) 
	{
		while (p != NULL)
		{
			push(p);
			p = p->left;

		}
		if (stack_empty())
		{
			p = pop();
			printf("%d ", p->key);
			p = p->right;

		}
		else
			break;
	}
}

void postorder(Tree *p) //프린트문 위치에 따라 후위
{
	

	if (p != NULL)
	{

		postorder(p->left);
		
		postorder(p->right);
		printf("%d ", p->key);

	}
}

int tree_depth(Tree * p, int dep)
{
	int l_dep, r_dep;
	l_dep = r_dep = dep;

	if (p->left != NULL)
	{

		l_dep = tree_depth(p->left, l_dep + 1);
	
	}

	if (p->right != NULL)
	{
		r_dep = tree_depth(p->right, r_dep + 1);
	}
	
	if (l_dep >= r_dep)
	{
		return l_dep;
	}
	else
		return r_dep;

}

//void counting(Tree* p)
//{
//	if (p != NULL)
//	{
//		tree_count++;
//		counting(p->left);
//		counting(p->right);
//
//	}
//}
main()
{
	Tree a = { 1,NULL,NULL }, b = { 2 ,NULL,NULL }, c = { 3 ,NULL,NULL }, d = { 4 ,NULL,NULL }, e = { 5 ,NULL,NULL }, f = { 6 ,NULL,NULL };
	c.left = &a; //					c(3)
	a.right = &b;//		a(1)					d(4)
	c.right = &d;//			b(2)					f(6)
	d.right = &f;//								e(5)
	f.left = &e;//

	preorder(&c); //전위
	puts("");
	init_stack();
	preorder2(&c); //우리가 만든 스택
	puts("");
	inorder(&c); //중위
	puts(""); 
	inorder2(&c); //중위
	puts("");
	postorder(&c); // 후위
	puts("");

	//levelorder(&c); //층별


	printf("depth ; %d\n",tree_depth(&c, 0));
	printf("l_depth ; %d\n", tree_depth(c.left, 0));  // 왼쪽
	printf("R-depth ; %d\n", tree_depth(c.right, 0)); // 오른쪽

	printf("트리의 깊이는 %d \n 최대 요소 수용량 %d \n 현재 노드의 수 %d\n 사용량 %d%%",tree_depth(&c, 0), 16, 8, 50);

}

