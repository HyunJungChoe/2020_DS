
/*
“aabbaccc”의 경우 “2a2ba3c”(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 
이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, “abcabcdede”와 같은 문자열은 전혀 압축되지 않습니다.

예를 들어, “ababcdcdababcdcd”의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 “2ab2cd2ab2cd”로 표현할 수 있습니다.
다른 방법으로 8개 단위로 잘라서 압축한다면 “2ababcdcd”로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

다른 예로, “abcabcdede”와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 “abcabc2de”가 되지만,
3개 단위로 자른다면 “2abcdede”가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 
이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.
따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.
이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.

"aabbaccc" -> 2a2ba3c  1개 단위분할 7
"ababcdcdababcdcd" ->2ababcdcd 8개 단위분할 9
"abcabcdede" -> 2abcdede 3개 단위 분할 8

1. 문자를 n개 단위로 잘라서 비교하여 압축

2. 압축할 문자열을 n개 단위씩 증가하며 input과 비교

     2-1. 동일한 문자열이 나오면 압축률 +1

     2-2 새로운 문자열이 나오면 비교할 문자열 변경 후, "압축률+문자열" 을 list에 저장

3. 2번 반복 

*/

#include <string>
#include <vector>

using namespace std;

int solution(string s) {
    int answer = 0;




    return answer;
}